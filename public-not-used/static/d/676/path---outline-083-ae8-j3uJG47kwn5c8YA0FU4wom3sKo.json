{"data":{"site":{"siteMetadata":{"title":"Deep Learning with Javascript"}},"mdx":{"id":"acf0a37a-d51e-5623-aa25-98db6ab02884","excerpt":"Getting Started What's Deep Learning Talk talk What's it good for Lots of examples. Weave some history in here. Kicking the tires Exampleâ€¦","tableOfContents":{"items":[{"url":"#getting-started","title":"Getting Started","items":[{"url":"#whats-deep-learning","title":"What's Deep Learning"},{"url":"#whats-it-good-for","title":"What's it good for"},{"url":"#kicking-the-tires","title":"Kicking the tires"},{"url":"#how-does-it-work","title":"How does it work"}]},{"url":"#data","title":"Data","items":[{"url":"#what-defines-a-good-dataset","title":"What defines a good dataset"},{"url":"#how-is-data-stored-and-processed","title":"How is data stored and processed"},{"url":"#manipulating-data","title":"Manipulating data"},{"url":"#data-augmentation","title":"Data Augmentation"}]},{"url":"#training","title":"Training","items":[{"url":"#examples","title":"Examples"},{"url":"#practice","title":"Practice"},{"url":"#rewards","title":"Rewards"}]},{"url":"#models","title":"Models","items":[{"url":"#the-component-parts","title":"The component parts"},{"url":"#non-linearity","title":"Non Linearity"},{"url":"#transfer-learning","title":"Transfer Learning"}]},{"url":"#not-included","title":"Not included"}]},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Getting Started`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `What's Deep Learning`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Talk talk`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `What's it good for`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Lots of examples. Weave some history in here.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Kicking the tires`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Example`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `How does it work`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `High level overview`), React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Data`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `What defines a good dataset`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Your dataset should be as close as possible to your expected data.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Representative`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Well-balanced`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `SHuffled`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `How is data stored and processed`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `To feed data to a neural net, it first needs to be transformed into a numeric form.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This will depend on your datatype. For images, you generally take pixel data and crush it. If its audio, you might take the samples, or maybe take some higher level representation, like a mel spectogram. If its text, you might assign each word a number, or you might use a pretrained set of word embeddings.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Whatever the type of data, the end product is the same: a tensor. What is a tensor?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Tensors are backed up, in Javascript, by Typed Arrays. Typed arrays blah blah.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Memory management, these are hefty buggers. You gotta clear them.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Manipulating data`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `We've mostly been discussing data as \"things\" and their \"labels\". For instance, an image and its label of dog.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Prior to feeding data, we need to separate our \"things\" from their \"labels\", and package up \"things\" and \"labels\" into 2 tensors.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Here's how that would look:`), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Tensorflow and other libraries give you convenience methods for shuffling data and slicing into batches automatically. You should take advantage of these. Occasionally you'll run into situations where you need to handle these yourself - for instance, if you have some particularly exotic form of data augmentation (we'll discuss what that is later).`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In that case, here's an example function:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Also with labels, you want something called one hots.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Data Augmentation`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This stuff is cool. You supplement your dataset.`), React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Training`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Examples`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Splitting data into buckets`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Train, test, validation.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://towardsdatascience.com/train-validation-and-test-sets-72cb40cba9e7\"\n    }\n  }, `https://towardsdatascience.com/train-validation-and-test-sets-72cb40cba9e7`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Practice`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Iteration, hyperparameters (learning rate)`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Rewards`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `Dunno what to do about this section.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Loss`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Forward and backward propagation`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Weights -> next section`), React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Models`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `The component parts`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Neurons`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Weights`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Layers`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Optimizer`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Non Linearity`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `An oft-repeated claim from traditional machine learning folks is that traditional statistical methods outperform in many cases deep learning. They're also faster and more interpretable.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is all true. Take this linear shit:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `linear`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You do linear regression on it and you're done.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Where deep learning shines is with non linear data and where you don't want to do feature engineering.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The reason deep learning is capable of learning non linear data is because of activation functions. Let's look at a few:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Activation Functions`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `So let's take some sample moons data and see how it does.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Transfer Learning`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `What they are`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `How to find them and understand them`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `How to build a new model on top of them.`), React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Not included`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `gradient descent`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Bugs`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `await next frame`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `CNNs`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Building image classification from scratch`));\n});"},"fields":{"title":"Outline","description":"an outline","date":"January 01, 2018"}}},"pageContext":{"id":"acf0a37a-d51e-5623-aa25-98db6ab02884","slug":"/outline/"}}