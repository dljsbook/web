{"data":{"site":{"siteMetadata":{"title":"Deep Learning with Javascript"}},"mdx":{"id":"d6fd60cf-7d4d-5a76-bfc1-671183cf1487","excerpt":"All neural nets begin with data. At its core, a neural network is simply a set of mathematical functions; theory drawn in code. Neural netsâ€¦","tableOfContents":{"items":[{"url":"#the-platonic-dataset","title":"The Platonic Dataset","items":[{"url":"#representative","title":"Representative"},{"url":"#well-balanced","title":"Well-Balanced"},{"url":"#shuffled","title":"Shuffled"}]},{"url":"#storing-and-processing-data","title":"Storing and Processing Data"},{"url":"#manipulating-data","title":"Manipulating data"},{"url":"#data-augmentation","title":"Data Augmentation"}]},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `All neural nets begin with data.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `At its core, a neural network is simply a set of mathematical functions; theory drawn in code. Neural nets only come alive in the presence of data.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `What is data? Data is the stuff you measure, collect, manipulate, and ultimately make predictions upon.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Data can be anything capable of being represented in numeric form in a computer. That includes a whole lot. Obviously numbers, like that found in spreadsheets or database tables, can be data.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[SPREADSHEET DATA]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Images are another common source of data:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[IMAGE DATA]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Audio and video are also commonly seen:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[AUDIO and VIDEO data]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Text, PDFs, documents, webpages - anything with text is data:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[TEXT data]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Laser recordings from the tops of autonomous cars, EMRs from medical devices, even EKGs from brain waves are data. If it can be represented in numerical form - and really, anything we can measure is capable of a numeric representation - then it can be data.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The particular nature of your data dictates everything about the Neural Network that you build.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `The Platonic Dataset`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Mostly we discuss data in aggregate, as a dataset.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `What defines a good dataset? It depends.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `More data is usually better. But if you're working on a well understood or well solved problem, you can get by with less. If the problem is novel, you'll need more. If you're working with some exotic data form, you'll probably need a lot more.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Regardless of the size and composition of your dataset, you should take care of three considerations when compiling your dataset: it should be `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `representative`), `, it should be `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `well-balanced`), `, and it should be `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `shuffled`), `.`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Representative`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `It is important that the dataset you use to train your network be `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `as similar as possible`), ` to the data the network will be predicting upon. That is, that it be `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `representative`), ` of the eventual dataset used for prediction. If your training data looks like:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"categories.svg\",\n      \"alt\": \"Categories of data\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `But the data it predicts on is more like:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"pred.svg\",\n      \"alt\": \"Prediction\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The network will struggle to predict successfully.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A common example of a non-representative dataset in image recognition is when a network is trained only with well-lit, high quality photography, yet when it is deployed in production, receives grainy, low resolution uploaded photos from users.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is like training your dog to \"Sit!\" and then switching from English to Spanish, expecting her to understand.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A neural network brings no inherent common sense to the table. The only things it learns are from the examples you provide it. Therefore, strive to provide as representative a sample of data as possible.`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Ruler detector  AI trained to classify skin lesions as potentially cancerous learns that lesions photographed next to a ruler are more likely to be malignant.  Andre Esteva et al, 2017  Dermatologist-level classification of skin cancer with deep neural networks `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://www.nature.com/articles/nature21056.epdf\"\n    }\n  }, `https://www.nature.com/articles/nature21056.epdf`), ` `)), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Well-Balanced`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `well-balanced`), ` dataset means that all categories in the dataset are of roughly equal number.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If one category is overrepresented in your data, you have an `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `unbalanced dataset`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"balanced-datasets.svg\",\n      \"alt\": \"Balanced vs. unbalanced dataset\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `An unbalanced dataset can lead to problems with prediction. For instance, assume 90% of your data belongs to category one, and 10% to category two. Rather than learning the specific traits of your data, your model might very well learn to assume that a better strategy is to predict everything as belonging to category one. This will net it a 90% success score!`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `What do you do if one category inherently has more data?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `There are a few strategies. You can oversample from the smaller category - in essence, just copy and paste data randomly. If you have enough data, you can reduce the size of the overabundance category. Finally, you can use data augmentation techniques to create new data and seek to balance the categories that way. We'll discuss data augmentation later.`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Shuffled`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Every time you train your model, you should take care that your data is `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `shuffled`), `, meaning your data is sorted randomly each training cycle.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `(be careful to use the same sorting order for both your labels and your features).`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You want to prevent the network from learning specific patterns that might be inherent in your training data. These patterns will almost certainly not be present when you go to predict, and will stump your network in production.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"shuffled.svg\",\n      \"alt\": \"Shuffled\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you always train your dog to sit, lie down, and play dead in the same order, the dog will start to anticipate the pattern of moves, instead of learning to associate each command with a specific action.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Shuffling your data breaks the ability to learn those associations, and will strengthen the connections that we actually want the network to learn.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In practice, a common way this can occur is if your categories are concatenated one after another. The model learns to predict the category based on which categories have come before. This precise scenario occurred in an image classification study by Ellefsen et all, where neural nets learned to classify edible or poisonous mushrooms that were presented in alternated order, failing to actually recognize any features of the images themselves.`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Data order patterns | Neural nets evolved to classify edible and poisonous mushrooms took advantage of the data being presented in alternating order, and didn't actually learn any features of the input images | Ellefsen et al, 2015 | Neural modularity helps organisms evolve to learn new skills without forgetting old skills | `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004128\"\n    }\n  }, `http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004128`), ` | `), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://kottke.org/18/11/how-ai-agents-cheat\"\n    }\n  }, `https://kottke.org/18/11/how-ai-agents-cheat`))), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Storing and Processing Data`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Neural networks operate on numbers, so any data you provide must first be transformed into numeric form.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `There are a number of common strategies depending on the type of data you're using. For images, pixel data is already in numeric form (across three RGB channels), though the pixel values are generally resampled to be between -1 and 1. Audio files might be processed into some higher level representation, like a mel spectogram. Words can each be assigned a number, or better, a set of word embeddings provided by a pretrained corpus.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Most Deep Learning frameworks expect data in the form of tensors. Tensors are a concept imported from the world of mathematics, and provide a container for storing multidimensional arrays.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[IMAGE OF TENSOR]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Tensors contain data, but they also have dimension, shape, type, and describe valid transformations. In particular, the dimension - also known as a tensor's rank - is important to understand. A tensor's shape is tied to that and is also important. Here's a `, `[3x3x3]`, ` tensor:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[IMAGE OF TENSOR]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You can create a tensor with:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"metaString\": null\n    }\n  }, `tf.tensor1d([1, 2]);\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Tensors are backed up, in Javascript, by `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `TypedArray`), `s.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `TypedArray`), `s provide an efficient mechanism for handling data. `), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://thekevinscott.com/tensors-in-javascript/\"\n    }\n  }, `https://thekevinscott.com/tensors-in-javascript/`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Tensors can do a number on your browser if you leave them sitting around, so you need to get comfortable with doing some garbage collection. `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `Tensorflow.js`), ` provides two mechanisms for handling unneeded tensors.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `First, you can manually dispose of a tensor by calling `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `tensor.dispose()`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `An easier option is to call the function `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `tf.tidy`), `:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"metaString\": null\n    }\n  }, `tf.tidy(() => {\n  const x = tf.tensor1d();\n});\n\n// x will be cleared, maybe?\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `tf.tidy`), ` only accepts synchronous functions, so anything being returned from within a promise or async function is no good.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Manipulating data`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `We've mostly been discussing data as \"things\" and their \"labels\". For instance, an image and its label.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[Image and a label]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `We've been talking about our `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `training data`), ` as a monolithic collection. In fact, we will consistently separate our data into \"features\" and \"labels\". Our features are the images themselves, and the labels describe which category they should be. You need these to be in the same order - matched up - but you also need them to be discrete tensors.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Prior to feeding data, we need to separate our \"things\" from their \"labels\", and package up \"things\" and \"labels\" into 2 tensors.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Here's how that would look:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[IMAGE OF SEPARATED]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `We'll talk about training in the next section, but you'll often want to slice and rearrange your data. Tensorflow.js and other libraries give you convenience methods for shuffling data and slicing into batches automatically. You should take advantage of these. Occasionally you'll run into situations where you need to handle these yourself - for instance, if you have some particularly exotic form of data augmentation (we'll discuss what that is later).`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In that case, here's an example function:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"metaString\": null\n    }\n  }, `return sliced data\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `All neural nets deal in numbers. Whether your training data consists of images, audio, text or some other exotic data format, you will need to convert it into numbers for consumption by the machine. The particular method to do this will depend on your data and may often be bespoke to your particular use case. Labels are the same - you will need to take your string labels - \"category one \" and \"category two\" - and turn these into numbers.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Your numbers, for images, might be the pixel data. For audio, the samples, or maybe a Fourier transform. For text, it might be numeric encodings for each word.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Your labels also need to be numbers, and we often want to perform something called \"one hot\" on them. `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `Where does the name \"one hot\" come from?`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Next, you'll need to convert your labels into numeric form. However, it's not as simple as assigning a number to each category. To demonstrate, let's say you're classifying three categories of fruit:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `raspberry - 0\nblueberry - 1\nstrawberry - 2\nDenoting numbers like this can imply a relationship where one does not exist, since these numbers are considered ordinal values; they imply some order in the data. Real world consequences of this might be that the network decides that a blueberry is something that is halfway between a raspberry and a strawberry, or that a strawberry is the \"best\" of the berries.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Strawberry Inception`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `To prevent these incorrect assumptions we use a process called \"one hot encoding\", resulting in data that looks like:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `raspberry  - `, `[1, 0, 0]`, `\nblueberry  - `, `[0, 1, 0]`, `\nstrawberry - `, `[0, 0, 1]`, `\n(Two great articles that go into more depth on one hot encoding are here and here.) We can leverage Tensorflow.js's built in oneHot functions to translate our labels:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `function oneHot(labelIndex, classLength) {\nreturn tf.tidy(() => tf.oneHot(tf.tensor1d(`, `[labelIndex]`, `).toInt(), classLength));\n};\nThis function takes a particular number (labelIndex, a number that corresponds to a label) and translates it to a one hot encoding, given some number of classes (classLength). We can use the function with the following bit of code, that first builds a mapping of numbers-to-labels off the incoming array of labels, and then builds a Tensor containing those one-hot encoded labels:`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Data Augmentation`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Neural networks thrive on data, yet sometimes it is a challenge to find enough data for your models. In these cases you can `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `augment`), ` your data to expand your dataset.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Augmentation is simply transforming your data in such a way that it provides alternative versions of the same data, while still falling within the parameters of what the neural network expects. For example, if you're training a network to recognize animals, you might take an image of a horse:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[HORSE]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `And try various rotations, zooms, and flipping horizontally:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[AUGMENTATIONS]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `On the other hand, you probably wouldn't want to do this:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `[VERTICAL AUGMENTATION]`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You probably won't be seeing many upside down horses (unless your users are out to screw you, in which case you might!)`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `But it does depend on your use case. For instance, if you're trying to recognize topological features from satellite imagery, both vertical and horizontal flipping `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `would`), ` make sense.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is one area I think it pays to bring your creativity to bear. For instance, in a project I'm working on, I'm trying to recognize laughter in television shows. Mixing tracks of laughter in with random talkings produces a lot of synthetic data.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `One thing to keep in mind when working with augmentations is to build your pipeline so that you're not augmenting your validation and test data (unless you intend to transform your predictive data as well - dunno why'd you do that). This can lead to some complicated use cases which are up to you to solve. Good luck buddy.`));\n});"},"fields":{"title":"title: Data","description":"Oh, the data you'll meet","date":"January 01, 2018"}}},"pageContext":{"id":"fe0952fc-0b5c-5d59-8b10-b7813086a2d7","slug":"slug"}}